(type (list a)
  ((.car a)
   (.cdr (: list a))))

(def null? (x)
  (eq (-> x :: *void)
      (-> 0 :: *void)))

(def foldr (f z xs) (:: (a b -> b) b [a] -> b)
  (if (null? xs)
    z
    (f (.car xs)
       (foldr f z (.cdr xs)))))

(def head (x) (:: [a] -> a)
  (.car x))

(def tail (x) (:: [a] -> [a])
  (.cdr x))

